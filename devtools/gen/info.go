// Â© 2024 Ilya Mateyko. All rights reserved.
// Use of this source code is governed by the ISC
// license that can be found in the LICENSE.md file.

//go:build ignore

// info.go generates help documentation for all commands from their doc comments.

package main

import (
	"bytes"
	"fmt"
	"go/build"
	"go/format"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"text/template"

	"go.astrophena.name/tools/internal/cli"
)

var tmpl = template.Must(template.New("info").Parse(`// Code generated by devtools/gen/info.go; DO NOT EDIT.

package main

import "go.astrophena.name/tools/internal/cli"

func init() {
	cli.SetInfo({{ printf "%#v" . }})
}`))

func main() {
	if err := filepath.WalkDir("./cmd", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		if !d.IsDir() {
			return nil
		}

		pkg, err := build.ImportDir(path, build.IgnoreVendor)
		if err != nil || len(pkg.GoFiles) == 0 || pkg.Name != "main" {
			return nil
		}

		doc, err := exec.Command("go", "doc", "./"+path).Output()
		if err != nil {
			if exitErr, ok := err.(*exec.ExitError); ok {
				return fmt.Errorf("`go doc` failed with %v: %s", exitErr, exitErr.Stderr)
			}
			return err
		}

		var buf bytes.Buffer

		info := cli.Info{
			Name:        filepath.Dir(filepath.Base(path)),
			Description: string(doc),
		}
		if err := tmpl.Execute(&buf, info); err != nil {
			return err
		}

		src, err := format.Source(buf.Bytes())
		if err != nil {
			return err
		}

		return os.WriteFile(filepath.Join(path, "info.go"), src, 0o644)
	}); err != nil {
		log.Fatal(err)
	}
}
