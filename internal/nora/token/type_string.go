// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Illegal-0]
	_ = x[EOF-1]
	_ = x[Ident-2]
	_ = x[Int-3]
	_ = x[String-4]
	_ = x[Assign-5]
	_ = x[Plus-6]
	_ = x[Minus-7]
	_ = x[Bang-8]
	_ = x[Asterisk-9]
	_ = x[Slash-10]
	_ = x[Lt-11]
	_ = x[Gt-12]
	_ = x[Eq-13]
	_ = x[Ne-14]
	_ = x[Comma-15]
	_ = x[Semicolon-16]
	_ = x[LeftParen-17]
	_ = x[RightParen-18]
	_ = x[LeftBrace-19]
	_ = x[RightBrace-20]
	_ = x[Function-21]
	_ = x[Let-22]
	_ = x[True-23]
	_ = x[False-24]
	_ = x[If-25]
	_ = x[Else-26]
	_ = x[Return-27]
}

const _Type_name = "IllegalEOFIdentIntStringAssignPlusMinusBangAsteriskSlashLtGtEqNeCommaSemicolonLeftParenRightParenLeftBraceRightBraceFunctionLetTrueFalseIfElseReturn"

var _Type_index = [...]uint8{0, 7, 10, 15, 18, 24, 30, 34, 39, 43, 51, 56, 58, 60, 62, 64, 69, 78, 87, 97, 106, 116, 124, 127, 131, 136, 138, 142, 148}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
