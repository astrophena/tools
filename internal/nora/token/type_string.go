// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Illegal-0]
	_ = x[EOF-1]
	_ = x[Ident-2]
	_ = x[Int-3]
	_ = x[String-4]
	_ = x[Comment-5]
	_ = x[Assign-6]
	_ = x[Plus-7]
	_ = x[Minus-8]
	_ = x[Bang-9]
	_ = x[Asterisk-10]
	_ = x[Slash-11]
	_ = x[Lt-12]
	_ = x[Gt-13]
	_ = x[Eq-14]
	_ = x[Ne-15]
	_ = x[Comma-16]
	_ = x[Semicolon-17]
	_ = x[LeftParen-18]
	_ = x[RightParen-19]
	_ = x[LeftBrace-20]
	_ = x[RightBrace-21]
	_ = x[Function-22]
	_ = x[Let-23]
	_ = x[True-24]
	_ = x[False-25]
	_ = x[If-26]
	_ = x[Else-27]
	_ = x[Return-28]
}

const _Type_name = "IllegalEOFIdentIntStringCommentAssignPlusMinusBangAsteriskSlashLtGtEqNeCommaSemicolonLeftParenRightParenLeftBraceRightBraceFunctionLetTrueFalseIfElseReturn"

var _Type_index = [...]uint8{0, 7, 10, 15, 18, 24, 31, 37, 41, 46, 50, 58, 63, 65, 67, 69, 71, 76, 85, 94, 104, 113, 123, 131, 134, 138, 143, 145, 149, 155}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
