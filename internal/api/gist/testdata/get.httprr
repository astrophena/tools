httprr trace v1
234 8019
GET https://api.github.com/gists/f32522138ef3493c11301cd020a5fca7 HTTP/1.1
Host: api.github.com
User-Agent: gist.test/ (+https://astrophena.name/bleep-bloop)
Accept: application/vnd.github+json
X-Github-Api-Version: 2022-11-28

HTTP/2.0 200 OK
Accept-Ranges: bytes
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset
Cache-Control: public, max-age=60, s-maxage=60
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Wed, 09 Apr 2025 06:21:22 GMT
Etag: W/"b6d5f4fd1e1cd26f9613577c04181cbd598633aa4c411b4e9f00917a3457aa8f"
Last-Modified: Wed, 09 Apr 2025 05:30:58 GMT
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: github.com
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
Vary: Accept,Accept-Encoding, Accept, X-Requested-With
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Api-Version-Selected: 2022-11-28
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: 7029:267885:11FECFD:12B751E:67F611E2
X-Ratelimit-Limit: 60
X-Ratelimit-Remaining: 5
X-Ratelimit-Reset: 1744179924
X-Ratelimit-Resource: core
X-Ratelimit-Used: 55
X-Xss-Protection: 0

{"url":"https://api.github.com/gists/f32522138ef3493c11301cd020a5fca7","forks_url":"https://api.github.com/gists/f32522138ef3493c11301cd020a5fca7/forks","commits_url":"https://api.github.com/gists/f32522138ef3493c11301cd020a5fca7/commits","id":"f32522138ef3493c11301cd020a5fca7","node_id":"G_kwDOA30FbtoAIGYzMjUyMjEzOGVmMzQ5M2MxMTMwMWNkMDIwYTVmY2E3","git_pull_url":"https://gist.github.com/f32522138ef3493c11301cd020a5fca7.git","git_push_url":"https://gist.github.com/f32522138ef3493c11301cd020a5fca7.git","html_url":"https://gist.github.com/astrophena/f32522138ef3493c11301cd020a5fca7","files":{"proxy.go":{"filename":"proxy.go","type":"text/plain","language":"Go","raw_url":"https://gist.githubusercontent.com/astrophena/f32522138ef3493c11301cd020a5fca7/raw/d652aa664d0f707f64b3004f73ae0f78b9716264/proxy.go","size":3012,"truncated":false,"content":"// The proxy binary is a reverse proxy that makes Miniflux accessible over the\n// tailnet.\npackage main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/exec\"\n\t\"os/signal\"\n\t\"path/filepath\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"tailscale.com/client/tailscale\"\n\t\"tailscale.com/tsnet\"\n)\n\n// https://fly.io/docs/reference/runtime-environment/#fly_app_name\nvar onFly = os.Getenv(\"FLY_APP_NAME\") != \"\"\n\nfunc hostname() string {\n\tif onFly {\n\t\treturn \"feed\"\n\t}\n\treturn \"feed-dev\"\n}\n\nfunc dir() string {\n\tif onFly {\n\t\treturn \"/data/tailscale\"\n\t}\n\tconfDir, err := os.UserConfigDir()\n\tif err != nil {\n\t\tlog.Fatalf(\"os.UserConfigDir(): %v\", err)\n\t}\n\treturn filepath.Join(confDir, \"miniflux-proxy\")\n}\n\nfunc setEnv(key, value string) {\n\tif err := os.Setenv(key, value); err != nil {\n\t\tlog.Fatalf(\"Failed to set %s to %s: %v\", key, value, err)\n\t}\n}\n\nfunc main() {\n\tvar (\n\t\thostname = flag.String(\"hostname\", hostname(), \"Hostname to use.\")\n\t\tdir      = flag.String(\"dir\", dir(), \"Name of the directory to use for Tailscale state.\")\n\t)\n\tflag.Parse()\n\n\tsetEnv(\"TAILSCALE_USE_WIP_CODE\", \"true\")\n\n\ts := &tsnet.Server{\n\t\tHostname: *hostname,\n\t\tDir:      *dir,\n\t}\n\n\tif _, err := os.Stat(s.Dir); os.IsNotExist(err) {\n\t\tif err := os.MkdirAll(s.Dir, 0o755); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tsetEnv(\"TS_LOGIN\", \"1\")\n\t} else if err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tl, err := s.Listen(\"tcp\", \":443\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\tl = tls.NewListener(l, &tls.Config{\n\t\tGetCertificate: tailscale.GetCertificate,\n\t})\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tgo runMiniflux(ctx)\n\n\tproxy := httputil.NewSingleHostReverseProxy(&url.URL{\n\t\tScheme: \"http\",\n\t\tHost:   \"localhost:8080\",\n\t})\n\tproxy.Transport = whoisTransport{}\n\n\ths := &http.Server{Handler: proxy}\n\tgo func() {\n\t\tif err := hs.Serve(l); err != nil {\n\t\t\tif err != http.ErrServerClosed {\n\t\t\t\tlog.Fatal(\"HTTP server crashed: %v\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\texit := make(chan os.Signal, 1)\n\tsignal.Notify(exit, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)\n\n\tsig := <-exit\n\tlog.Printf(\"Received %s, gracefully shutting down...\", sig)\n\n\tshutdownCtx, cancel := context.WithTimeout(ctx, 30*time.Second)\n\tdefer cancel()\n\n\ths.Shutdown(shutdownCtx)\n}\n\ntype whoisTransport struct{}\n\nfunc (_ whoisTransport) RoundTrip(r *http.Request) (*http.Response, error) {\n\twho, err := tailscale.WhoIs(r.Context(), r.RemoteAddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tr.Header.Set(\"Auth-Email\", who.UserProfile.LoginName)\n\treturn http.DefaultTransport.RoundTrip(r)\n}\n\nfunc runMiniflux(ctx context.Context) {\n\tcmd := exec.CommandContext(ctx, \"miniflux\")\n\tcmd.Stderr = os.Stderr\n\tcmd.Env = append(os.Environ(),\n\t\t\"LISTEN_ADDR=localhost:8080\",\n\t\t\"AUTH_PROXY_HEADER=Auth-Email\",\n\t\t\"AUTH_PROXY_USER_CREATION=true\",\n\t\t\"CLEANUP_REMOVE_SESSIONS_DAYS=1\",\n\t\t\"METRICS_COLLECTOR=true\",\n\t\t\"METRICS_ALLOWED_NETWORKS=100.64.0.0/10\",\n\t)\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatalf(\"Miniflux crashed: %v\", err)\n\t}\n}\n","encoding":"utf-8"}},"public":true,"created_at":"2022-02-04T08:56:37Z","updated_at":"2022-02-04T08:56:37Z","description":"Miniflux Tailscale proxy","comments":0,"user":null,"comments_enabled":true,"comments_url":"https://api.github.com/gists/f32522138ef3493c11301cd020a5fca7/comments","owner":{"login":"astrophena","id":58525038,"node_id":"MDQ6VXNlcjU4NTI1MDM4","avatar_url":"https://avatars.githubusercontent.com/u/58525038?v=4","gravatar_id":"","url":"https://api.github.com/users/astrophena","html_url":"https://github.com/astrophena","followers_url":"https://api.github.com/users/astrophena/followers","following_url":"https://api.github.com/users/astrophena/following{/other_user}","gists_url":"https://api.github.com/users/astrophena/gists{/gist_id}","starred_url":"https://api.github.com/users/astrophena/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astrophena/subscriptions","organizations_url":"https://api.github.com/users/astrophena/orgs","repos_url":"https://api.github.com/users/astrophena/repos","events_url":"https://api.github.com/users/astrophena/events{/privacy}","received_events_url":"https://api.github.com/users/astrophena/received_events","type":"User","user_view_type":"public","site_admin":false},"forks":[],"history":[{"user":{"login":"astrophena","id":58525038,"node_id":"MDQ6VXNlcjU4NTI1MDM4","avatar_url":"https://avatars.githubusercontent.com/u/58525038?v=4","gravatar_id":"","url":"https://api.github.com/users/astrophena","html_url":"https://github.com/astrophena","followers_url":"https://api.github.com/users/astrophena/followers","following_url":"https://api.github.com/users/astrophena/following{/other_user}","gists_url":"https://api.github.com/users/astrophena/gists{/gist_id}","starred_url":"https://api.github.com/users/astrophena/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astrophena/subscriptions","organizations_url":"https://api.github.com/users/astrophena/orgs","repos_url":"https://api.github.com/users/astrophena/repos","events_url":"https://api.github.com/users/astrophena/events{/privacy}","received_events_url":"https://api.github.com/users/astrophena/received_events","type":"User","user_view_type":"public","site_admin":false},"version":"cf5d9b60732a8626d1d134c8136ec2d90c514327","committed_at":"2022-02-04T08:56:37Z","change_status":{"total":139,"additions":139,"deletions":0},"url":"https://api.github.com/gists/f32522138ef3493c11301cd020a5fca7/cf5d9b60732a8626d1d134c8136ec2d90c514327"}],"truncated":false}